#!/bin/bash
KATASKEVIS_PROGNAME="Kataskevis"
KATASKEVIS_VERSION="0.0.1"

RESET=$(echo -en '\033[0m')
BOLD=$(echo -en '\033[1m')
BLACK=$(echo -en '\033[30m')
RED=$(echo -en '\033[31m')
GREEN=$(echo -en '\033[32m')
YELLOW=$(echo -en '\033[33m')
BLUE=$(echo -en '\033[34m')
PURPLE=$(echo -en '\033[35m')
CYAN=$(echo -en '\033[36m')
LIGHTGRAY=$(echo -en '\033[37m')
GRAY=$(echo -en '\033[90m')
LRED=$(echo -en '\033[91m')
LGREEN=$(echo -en '\033[92m')
LYELLOW=$(echo -en '\033[93m')
LBLUE=$(echo -en '\033[94m')
LPURPLE=$(echo -en '\033[95m')
LCYAN=$(echo -en '\033[96m')
WHITE=$(echo -en '\033[97m')

declare -A CCLIST=(
  [cc]="cc"
  [gcc]="gcc"
  [clang]="clang"
  [zig]="zig cc"
  [tcc]="tcc"
  [msvc]="cl"
  [watcom]="wcc"
)

error() {
  echo "${BOLD}${RED}Error:${RESET} ${RED}${1}"
  exit ${2:-1}
}

warning() {
  echo "${BOLD}${YELLOW}Warning:${RESET} ${YELLOW}${1}"
}

build() {
  echo "${BOLD}${KATASKEVIS_PROGNAME} ${KATASKEVIS_VERSION}${RESET}"
  [[ ! -z ${1} ]] && SRCDIR=${1} || SRCDIR=.
  [[ ! -z ${2} ]] && BUILDDIR=${2} || BUILDDIR=.
  read -r -d '' LOCKFILE <<EOF
## This is an auto-generated file from ${KATASKEVIS_PROGNAME} ${KATASKEVIS_VERSION}
## This file is required to detect if the project is built with Kataskevis.
## Do not remove this file!
EOF
  [[ -f ${BUILDDIR}/.kataskevis-lock ]] && warning "${BUILDDIR}/.kataskevis-lock already exists. Regenerating build files..."
  [[ -f ${SRCDIR}/Kataskevisfile ]] && source ${SRCDIR}/Kataskevisfile || error "${SRCDIR}/Kataskevisfile doesn't exist. Quitting"
  echo "${LGREEN}Project name:${RESET} ${project_name}"
  [[ ! -z ${project_version} ]] && echo "${LGREEN}Project version:${RESET} ${project_version}"
  echo -n "${LBLUE}Checking the C compiler... ${RESET}"
  CFLAGS="-O2 -Wall "
  OUTFLAGS="-o "
  OBJOUTFLAGS="-c -o "
  DEFINEFLAGS="-D"
  if [[ $(which cc) ]]; then
    if [[ $(cc --version | head -1 | grep gcc) ]]; then
      CC=${CCLIST[gcc]}
      echo "$(gcc --version | head -1)"
    elif [[ $(cc --version | head -1 | grep clang) ]]; then
      CC=${CCLIST[clang]}
      echo "$(clang --version | head -1)"
    else
      CC=${CCLIST[cc]}
      echo "$(cc --version | head -1)"
    fi
  elif [[ $(which gcc) ]]; then
    if [[ $(gcc --version | head -1 | grep clang) ]]; then
      CC=${CCLIST[clang]}
      echo "$(clang --version | head -1)"
    else
      CC=${CCLIST[gcc]}
      echo "$(gcc --version | head -1)"
    fi
  elif [[ $(which zig) ]]; then
    CC=${CCLIST[zig]}
    echo "zig $(zig version)"
  elif [[ $(which tcc) ]]; then
    CC=${CCLIST[tcc]}
    echo "$(tcc --version)"
  elif [[ $(which cl) ]]; then
    CC="${CCLIST[msvc]} /nologo"
    CFLAGS="/O2"
    OUTFLAGS="/Fe"
    OBJOUTFLAGS="/Fo"
    DEFINEFLAGS="/D"
    echo "$(cl -v | head -1)"
  elif [[ $(which wcc) ]]; then
    CC=${CCLIST[watcom]}
    echo "$(wcc -v | head -1)"
  else
    echo "not installed"
    error "The C compiler isn't installed! Please install a C compiler like GCC"
  fi
  if [[ ! -z ${dependencies} ]]; then
    for dep in ${dependencies[@]}; do
      echo -n "${LBLUE}Checking if required dependency ${BOLD}${dep}${RESET}${LBLUE} exists... ${RESET}"
      if $(pkg-config ${dep}); then
        echo "yes"
        CFLAGS+="$(pkg-config --cflags ${dep}) "
        LDFLAGS+="$(pkg-config --libs ${dep}) "
      else
        echo "no"
        error "The required dependency ${dep} doesn't exist. Make sure the dependency is installed. If you sure the dependency is installed, it might be a typo. Check your spelling and try again."
      fi
    done
  fi
  if [[ ! -z ${optional_dependencies} ]]; then
    for dep in ${optional_dependencies[@]}; do
      echo -n "${LBLUE}Checking if optional dependency ${BOLD}${dep}${RESET}${LBLUE} exists... ${RESET}"
      if $(pkg-config ${dep}); then
        echo "yes"
        CFLAGS+="$(pkg-config --cflags ${dep}) "
        LDFLAGS+="$(pkg-config --libs ${dep}) "
      else
        echo "no"
      fi
    done
  fi
  [[ ! -z ${cflags} ]] && CFLAGS+="${cflags} "
  [[ ! -z ${ldflags} ]] && LDFLAGS+="${ldflags} "
  echo -n "${LBLUE}Generating Makefile... ${RESET}"
  cat > ${BUILDDIR}/Makefile <<EOF
# This is an auto-generated file from ${KATASKEVIS_PROGNAME} ${KATASKEVIS_VERSION}
# Do not edit this file!

ifneq (\$(words \$(MAKECMDGOALS)),1)
.DEFAULT_GOAL = all
%:
	@\$(MAKE) \$@ --no-print-directory -rRf \$(firstword \$(MAKEFILE_LIST))
else
ifndef ECHO
T := \$(shell \$(MAKE) \$(MAKECMDGOALS) --no-print-directory \\
	-nrRf \$(firstword \$(MAKEFILE_LIST)) \\
	ECHO="COUNTTHIS" | grep -c "COUNTTHIS")
N := x
C = \$(words \$N)\$(eval N := x \$N)
ECHO = printf "\r\033[K[\$C/\$T] \033[92m%b\033[0m"
endif

NAME = ${project_name}$([[ ! -z ${project_version} ]] && echo -e "\nVERSION=${project_version}")
SRCFILES = $(for file in ${source_files[@]}; do printf "%s " ${SRCDIR}/${file}; done)
OBJFILES = \$(notdir \$(SRCFILES:.c=.o))
EXEOUT = ${executable_output}
CC = ${CC}
CFLAGS = ${CFLAGS} ${DEFINEFLAGS}__KATASKEVIS__
LDFLAGS = ${LDFLAGS}
PREFIX ?= /usr/local

.PHONY: all clean

all: \$(EXEOUT)
	@printf "\n"

clean:
	@\$(ECHO) "Removing all object files"
	@rm -f \$(OBJFILES)
	@\$(ECHO) "Removing \033[1m\$(EXEOUT)"
	@rm -f \$(EXEOUT)
	@printf "\n"

install: \$(EXEOUT)
	@\$(ECHO) "Installing \033[1m\$(EXEOUT)"
	@install -m755 \$(EXEOUT) \$(PREFIX)/bin/\$(EXEOUT)
	@printf "\n"

\$(OBJFILES): \$(SRCFILES)
	@\$(ECHO) "Compiling \033[1m\$(notdir \$<)"
	@\$(CC) \$(CFLAGS) $< ${OBJOUTFLAGS}\$@

\$(EXEOUT): \$(OBJFILES)
	@\$(ECHO) "Linking \$@"
	@\$(CC) \$(CFLAGS) \$(LDFLAGS) $< ${OUTFLAGS}\$@

endif
EOF
  echo "${LOCKFILE}" > ${BUILDDIR}/.kataskevis-lock
  echo "done"
}

help() {
  cat <<'EOF'
   __ __     __           __            _   
  / //_/__ _/ /____ ____ / /_____ _  __(_)__
 / ,< / _ `/ __/ _ `(_-</  '_/ -_) |/ / (_-<
/_/|_|\_,_/\__/\_,_/___/_/\_\\__/|___/_/___/

EOF
  cat <<EOF
Version ${KATASKEVIS_VERSION}

Usage: ${0} [options] <sourcedir>

Options:
	-h, --help		Show this help message
	-V, --version	Show the version of the software
	-v, --verbose	Enable verbose mode. Useful for bug reports and debugging purposes

This project is in work in progress. Feel free to contribute to this project at https://github.com/leapofazzam123/Kataskevis.
EOF
  exit
}

while getopts "hvV-" OPTION; do
  case ${OPTION} in
  h)
    help
    ;;
  v)
    set -x
    ;;
  V)
    echo "${KATASKEVIS_PROGNAME} ${KATASKEVIS_VERSION}"
    echo "Copyright (C) 2021 Leap of Azzam"
    echo -e "\n${KATASKEVIS_PROGNAME} is licensed under the MIT License."
    ;;
  -)
    case ${OPTION#"-"} in
      help)
        help
        ;;
      verbose)
        set -x
        ;;
      version)
        echo "${KATASKEVIS_PROGNAME} ${KATASKEVIS_VERSION}"
        echo "Copyright (C) 2021 Leap of Azzam"
        echo -e "\n${KATASKEVIS_PROGNAME} is licensed under the MIT License."
        ;;
    esac
    ;;
  ?)
    exit 1
    ;;
  esac
  exit
done

build $@
